<?php
/**
 * The main functionality of this module.
 * Embed module haplotype-map to visualize haplotype data in tripal sites.
 *
 * about haplotype-map:
 * developed by Venkat Bandi(https://github.com/kiranbandi)
 * the module is available in https://github.com/kiranbandi/haplotype-map
 */

require_once('includes/haplotypembed.embedpage.inc');

/**
 * Implements hook_menu(). 1
 */
function haplotypembed_menu(){
  // $default_map = NULL;
  //
  // //get all
  // $h_maps = haplotype_extract_available_maps(, );

  $items = array();

  $items['haplotype-map'] = array(
    'title' => 'Haplotype Maps',
    'description' => 'Embeded haplotype map module for users to view haplotype files.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('haplotypemap_embed_form'),
    'access arguments' => array('view haplotype map'),
  );

  $items['haplotype-map/view'] = array(
    'title' => 'Haplotype Maps',
    'description' => 'Embeded haplotype map module for users to view haplotype files.',
    'page callback' => 'haplotypembed_embed_page',
    'page arguments' => array(''),
    'access arguments' => array('view haplotype map'),
  );

  // $items['haplotype-map/filter'] = array(
  //   'title' => 'Hapmap File Filter',
  //   'description' => 'Filter hapmap files for user selected germplasm, then view in Haplotype Maps.',
  //   'page callback' => 'trpdownload_download_page',
  //   'page arguments' => array(''),
  //   'access arguments' => array('access content'),
  //   'type' => MENU_CALLBACK,
  // );

  // administration
  // manage files, list
  $items['admin/tripal/extension/haplotype-map'] = array(
    'title' => 'Embeded Haplotype map',
    'description' => 'Provides users embeded haplotype maps.',
    'page callback' => 'haplotypemap_embed_admin_list',
    'page arguments' => array(),
    'access arguments' => array('administer tripal'  $items['filter_vcf/Bgzipped'] = array(
    'title' => 'Download Filtered VCF: Block Compression/Decompression (bgzipped) Format',
    'page callback' => 'trpdownload_download_page',
    'page arguments' => array('vcf_filter_bgzipped'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );),
    'file' => 'includes/haplotypembed.admin.inc',
  );
  // add
  $items['admin/tripal/extension/haplotype-map/add'] = array(
    'title' => 'Add Haplotype map',
    'description' => 'Add a haplotype map in list.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('haplotypemap_embed_admin_file_form', 'add'),
    'access arguments' => array('administer tripal'),
    'file' => 'includes/haplotypembed.admin.inc',
  );
  // edit
  $items['admin/tripal/extension/haplotype-map/edit'] = array(
    'title' => 'Edit Haplotype map',
    'description' => 'Edit a haplotype map in list.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('haplotypemap_embed_admin_file_form', 'edit'),
    'access arguments' => array('administer tripal'),
    'file' => 'includes/haplotypembed.admin.inc',
  );
  // delete
  $items['admin/tripal/extension/haplotype-map/delete'] = array(
    'title' => 'Delete Haplotype map',
    'description' => 'Delete a haplotype map in list.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('haplotypemap_embed_admin_file_form', 'delete'),
    'access arguments' => array('administer tripal'),
    'file' => 'includes/haplotypembed.admin.inc',
  );

  // manage access
  // -- Add
  $items['admin/tripal/extension/haplotype-map/access'] = array(
    'title' => 'Haplotype Map File Permissions',
    'description' => 'Handle permissions for a Haplotype Map File.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('haplotypemap_embed_admin_file_perm_form', 5),
    'access arguments' => array('administer tripal'),
    'file' => 'includes/haplotypembed.admin.inc',
  );

  // -- Remove (no confirm)
  $items['admin/tripal/extension/haplotype-map/access/%/%/%'] = array(
    'title' => 'Remove Haplotype Map File Permissions',
    'description' => 'Handle permissions for a Haplotype Map file.',
    'page callback' => 'haplotypembed_admin_file_perm_remove_callback',
    'page arguments' => array(5,6,7),
    'access arguments' => array('administer tripal'),
    'file' => 'includes/haplotypembed.admin.inc',
  );

  // AUTOCOMPLETE: User
  // Note: We can't just use user/autocomplete, user_autocomplete() because it assumes
  // you are typing the username in order rather then simply finding the substring.
  $items['autocomplete/haplotype-map/user'] = array(
    'title' => 'Haplotype Map: Autocomplete',
    'page callback' => 'haplotypembed_user_autocomplete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer tripal'),
  );


  return $items;
}


/**
 * Implements hook_libraries_info(). last
 */
function haplotypembed_libraries_info(){

  $libraries['haplotype-map'] = array(
    'name' => 'haplotype-map',
    'vendor url' => 'https://github.com/kiranbandi/haplotype-map',
    'version' => '0.0.1',
    'download url' => 'https://github.com/kiranbandi/haplotype-map',
  );

  return $libraries;
}


/**
 * Implements hook_form().
 */
function haplotypemap_embed_form($form, &$form_state){
  // check for available dataset, ask user to pick and feed to haplotype-map
  global $base_path;
  // Path to module.
  $module_path = drupal_get_path('module', 'haplotypembed');
  // Relative Path to Library.
  $haplotypemap_embed_lib_path = libraries_get_path('haplotype-map') . '/';

  //section 1, ask user to select a file first

  $form['s1'] = array(
    '#type' => 'fieldset',
    '#title' => 'Choose your Haplotype map File.',
    '#description' => 'The following table contains all the available Haplotype maps. Choose the one you would like to show haplotype map for default germplasm or filter for specific germplasm.',
    '#prefix' => '<div id="all-haplotypemap-options"><span class="stages stage1">1</span>',
  );

  $files = page_list_available_map_files();
  // create table for all files/map
  $form['files'] = array(
    '#type' => 'hidden',
    '#value' => serialize($files),
    '#serialized' => TRUE,
  );

  $header = array(
    'name' => t('Name'),0
    'total_number_germplasm' => t('Number of Germplasm'),
    'default_germplasm' => t('Germplasm in Default File'),
  );

  foreach ($files as $haplotypembed_file_id => $d){
    $files[$haplotypembed_file_id]['name'] = l($d['human_readable_name'], '/haplotype-map/view', ['query' => ['source' => pathinfo(basename($d['default_file_path']), PATHINFO_FILENAME)] ]);
    $files[$haplotypembed_file_id]['total_number_germplasm'] = count(explode("\n", $d['all_germplasm']));
    $files[$haplotypembed_file_id]['default_germplasm'] = $d['default_germplasm'];
  }

  $form['s1']['haplotypembed_file_id'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $files,
    '#empty' => t('No Haplotype map available.'),
    '#multiple' => FALSE,
    '#ajax' => array(
      'callback' => 'ajax_haplotypemap_embed_show_description_callback',
      'wrapper' => 'all-haplotypemap-options',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  // markup to show file/map description
  if (isset($_GET['haplotypembed_file_id']) AND is_numeric($_GET['haplotypembed_file_id'])) {
    $form['s1']['haplotypembed_file_id']['#default_value'] = $_GET['haplotypembed_file_id'];
  }
  if (isset($form_state['values']['haplotypembed_file_id'])) {
    $form['s1']['haplotypembed_file_id']['#default_value'] = $form_state['values']['haplotypembed_file_id'];
  }

  $markup_map_description = '';
  if (!empty($form['s1']['haplotypembed_file_id']['#default_value'])) {
    $current_map_file = $files[  $form['s1']['haplotypembed_file_id']['#default_value']  ];
    if (!empty($current_map_file['description'])) {
      $markup_map_description = '<br /><p><strong>More information on <em>'.$current_map_file['human_readable_name'].'</em>:</strong> ' . $current_map_file['description'] . '</p>';
    }
    if (!empty($current_map_file['all_germplasm'])) {
      $all_germplasm_names = $current_map_file['all_germplasm'];
    }
    if (!empty($current_map_file['default_germplasm'])) {
      $default_germplasm_names = $current_map_file['default_germplasm'];
    }
  }
  $form['s1']['file_description'] = array(
    '#type' => 'markup',
    '#markup' => $markup_map_description,
  );


  //section 2, give option of using default file or filter for specific germplasm
  $form['s2'] = array(
    '#type' => 'fieldset',
    '#title' => 'Haplotype map for this file.',
    '#tree' => TRUE,
    '#prefix' => '<span class="stages stage2">2</span>',
  );
  //S2.a include haplotype-map using default file
  $form['s2']['default_map'] = array(
    '#type' => 'fieldset',
    '#title' => 'Haplotype map of default germplasm',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => 'The haplotype map for default germplasm',
  );


  //S2.b filter file for the germpasm user choose then display with haplotype map viewer
  $form['s2']['filtered_map'] = array(
    '#type' => 'fieldset',
    '#title' => 'Restrict to specific germplasm',
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => 'Filter for specific germplasm and display in haplotype map',
  );

  $form['s2']['filtered_map']['available_germplasm'] = array(
    '#type' => 'textarea',
    '#title' => 'Germplasm from selected file',
    '#disable' => TRUE,
    '#description' => 'All germplasm (individuals) in selected file.',
    '#rows' => 2,
    );

  $form['s2']['filtered_map']['germplasm_select'] = array(
    '#type' => 'textarea',
    '#title' => 'Filter for these Germplasm',
    '#description' => 'Only include these germplasm in haplotype map. <strong>Please copy less than 15 germplasm (ideally less than 10) that need to be kept the textarea.</strong>',
    '#rows' => 2,
  );

  if ((isset($form_state['values']['haplotypembed_file_id'])) or (isset($_GET['haplotypembed_file_id']) AND is_numeric($_GET['haplotypembed_file_id']) )) {
    //update filter
    $form['s2']['default_map']['#collapsed'] = FALSE;
    $form['s2']['default_map']['#description'] = 'Please check the ' . l($current_map_file['human_readable_name'].' Haplotype Map ', '/haplotype-map/view', ['query' => ['source' => pathinfo(basename($current_map_file['default_file_path']), PATHINFO_FILENAME)] ]) . 'for default germplasm.';


    $form['s2']['filtered_map']['#collapsed'] = FALSE;
    $form['s2']['filtered_map']['available_germplasm']['#rows'] = 5;
    $form['s2']['filtered_map']['available_germplasm']['#disable'] = FALSE;
    $form['s2']['filtered_map']['germplasm_select'][['#rows']] = 5;
    $form['s2']['filtered_map']['available_germplasm']['#value'] = $all_germplasm_names;

  }

  $form['s2']['filtered_map']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Filter',
  );

  return $form;
}

/**
 * validate form
 */
function haplotypemap_embed_form_validate($form, &$form_state){
  if (empty($form_state['values']['haplotypembed_file_id'])) {
    form_set_error('haplotypembed_file_id', 'You must choose a Haplotype Map file.');
  }

  $all_germplasm_names = explode("\n", $form_state['values']['s2']['filtered_map']['available_germplasm']);
  if ($form_state['values']['s2']['filtered_map']['germplasm_select'] == '') {
    form_set_error('s2][filtered_map', 'You must provide germplasm name for filter');
  }
  else{
    // check if user input germplasm is less than 15
    $user_input_germplasm = explode("\n",$form_state['values']['s2']['filtered_map']['germplasm_select']);
    if(count($user_input_germplasm) > 15){
      form_set_error('s2][filtered_map', 'Please choose less than 15 germplasm.');
    }
    else{
      foreach($user_input_germplasm as &$g){
        // check if user input germplasm all have matches
        if(in_array($g, $all_germplasm_names) == FALSE){
          form_set_error('s2][filtered_map', 'Please double check input germplams names, which may not match to provided.');
          break;
        }
      }
    }
  }
}

/**
 * submit to filte and redirect to haplotype map
 */
function haplotypemap_embed_form_submit($form, &$form_state){

}

 /**
  *  a function list all the available haplotype maps.
  */
function page_list_available_map_files(){
  global $user;

  // Gran the roles and user id of the current user.
  $uid = $user->uid;
  $rids = is_array($user->roles) ? array_keys($user->roles) : array();

  // Only grab files that the current user has permission to see.
  $files = db_query('
    SELECT f.*
    FROM {haplotypembed_perm} perm
    LEFT JOIN {haplotypembed_files} f ON f.haplotypembed_file_id=perm.haplotypembed_file_perm_id
    WHERE perm.uid=:uid OR perm.rid IN (:rids)
    ORDER BY human_readable_name ASC',
    array(':uid' => $uid, ':rids' => $rids))->fetchAllAssoc('haplotypembed_file_id', PDO::FETCH_ASSOC);

  return $files;
}

/**
 *  a function list all the available haplotype maps.
 */
function get_one_haplotype_map_file($haplotypembed_file_id){
  $file = db_query('SELECT * FROM {haplotypembed_files} WHERE haplotypembed_file_id=:id',
    array(':id' => $haplotypembed_file_id))->fetchObject();

  return $file;
}

function ajax_haplotypemap_embed_show_description_callback($form, $form_state){
  return array($form['s1'], $form['s2']);
}

/**
 * Autocomplete: Usernames Access permissions.
 */
function haplotypembed_user_autocomplete($string = '') {
  $matches = array();
  if ($string) {
    $result = db_query('SELECT name FROM {users} WHERE LOWER(name) ~ LOWER(:string)', array(':string' => $string));
    foreach ($result as $user) {
      $matches[$user->name] = check_plain($user->name);
    }
  }

  drupal_json_output($matches);
}
